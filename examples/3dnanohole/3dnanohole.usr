c-----------------------------------------------------------------------
c
c  USER SPECIFIED ROUTINES:
c
c     - boundary conditions
c     - initial conditions
c     - variable properties
c     - forcing function for fluid (f)
c     - forcing function for passive scalar (q)
c     - general purpose routine for checking errors etc.
c
c-----------------------------------------------------------------------
      subroutine usersrc(baseidx,srchx,srchy,srchz,srcex,srcey,srcez)

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      include 'PML'
      include 'SCRATCH'

      ! Add source terms to the fields given in src{e,h}{x,y,z}.
      ! Read file doc/rea-file.txt for specification.
      ! Since we want to make it possible to have several sources,
      ! we specify a `baseidx', relative to which all parameters are
      ! read.

      integer baseidx

      real srchx(lx1,ly1,lz1,lelt),
     $     srchy(lx1,ly1,lz1,lelt),
     $     srchz(lx1,ly1,lz1,lelt),
     $     srcex(lx1,ly1,lz1,lelt),
     $     srcey(lx1,ly1,lz1,lelt),
     $     srcez(lx1,ly1,lz1,lelt)

      ! Extent of domain
      integer nxyzl
      save    nxyzl

      real    xsize, ysize, zsize
      save    xsize, ysize, zsize
      real    xmin, xmax, ymin, ymax, zmin, zmax
      save    xmin, xmax, ymin, ymax, zmin, zmax

      integer icalld
      save    icalld
      data    icalld /0/             

      real    srcscal
      real    tstart, tstop
      real    tfactor
      integer tmodtyp
      integer smodtyp
      integer fldchs

      real    xx, yy, zz
      real    xloc,yloc,zloc,xw,yw,zw,xwidth,ywidth,zwidth          
      real    xgauss, ygauss, zgauss
      real    kx0, ky0, kz0
      real    kx , ky , kz 
      real    ww, w, twopi
      real    fldhere
      real    wavelength
      real    impedence_freespace                                     

c ... presetting
      twopi  = 2.0*pi
      impedence_freespace=sqrt(permit_0/permea_0)
      nxyzl  = nx1*ny1*nz1*nelt

c ... define the source modes in time and space            

      tmodtyp = int(param(57))
      smodtyp = int(param(58))         
      srcscal =     param(59)
      fldchs  = int(param(60))
      tstart  =     param(62)          
      tstop   =     param(63)             

c ... temporal mode set  
      pulse_loc    = param(64)  ! tmodty=2: gaussian 
      pulse_width  = param(65)

c ... temporal mode set  
      temporal_freq= param(64)  ! tmodty=3: cosine pulse

c ... temporal mode set  
      duration     = param(65)  ! tmodty=4: rectangular pulse

c ... spatial mode set  
      xloc  = param(66)*nmscale         ! smodty=2: gaussian 
      yloc  = param(67)*nmscale  
      zloc  = param(68)*nmscale  
      xw    = param(69)  
      yw    = param(70)  
      zw    = param(71)  
      xwidth= param(72)*nmscale  
      ywidth= param(73)*nmscale  
      zwidth= param(74)*nmscale  

c ... spatial mode set  
      kx    = param(66)                  ! smodty=3: planewave
      ky    = param(67)                  
      kz    = param(68)              

      wavelength = param(69)*nmscale

c ... begin                   

c     if ((rktime.lt.tstart).or.(rktime.gt.tstop)) then
c       return
c     endif

c ... Evaluate temporal modulation.

      if  (tmodtyp.eq.0)  tfactor =  0.0                  
      if  (tmodtyp.eq.1)  tfactor =  1.0
      if  (tmodtyp.eq.2)   
     $       call gussian_pulse(tfactor,rktime,pulse_loc,pulse_width)       
      if  (tmodtyp.eq.3)        
     $       call cosine_pulse (tfactor,rktime,twopi,temporal_freq)
      if  (tmodtyp.eq.4)         
     $       call rectangular_pulse(tfactor,rktime,duration)
      if ((tmodtyp.ge.5).or.(tmodty.lt.0)) then
             write (*,*) 'Invalid time modulation type', tmodtyp
             call exitt
      endif


c ... Evaluate spatial modulation.
      if      (smodtyp.eq.1) then

          do i=1,nxyzl
             fullary(i,1,1,1) = tfactor * srcscal
          enddo

      elseif  (smodtyp.eq.2) then    ! Gaussian

          xgauss = xloc+xw*rktime                                       
          ygauss = yloc+yw*rktime                                       
          zgauss = zloc+zw*rktime                                       

          do i=1,nxyzl

             xx = xm1(i,1,1,1)
             yy = ym1(i,1,1,1)
             zz = zm1(i,1,1,1)

             fldhere = srcscal

             if (xwidth.ne.0)             
     $           fldhere = fldhere*exp(-(2.0*(xx-xgauss)/xwidth)**2)    
             if (ywidth.ne.0) 
     $           fldhere = fldhere*exp(-(2.0*(yy-ygauss)/ywidth)**2)
             if (zwidth.ne.0) 
     $	         fldhere = fldhere*exp(-(2.0*(zz-zgauss)/zwidth)**2)

             fullary(i,1,1,1) = tfactor * fldhere

          enddo

      elseif (smodtyp.eq.3) then

          fldhere = tfactor*srcscal

          do i=1,nxyzl

             xx = xm1(i,1,1,1)
             yy = ym1(i,1,1,1)
             zz = zm1(i,1,1,1)

             fullary(i,1,1,1)=fldhere*bm1(i,1,1,1)
     $       *sin(twopi/wavelength*(cspeed*rktime-(kx*xx+ky*yy+kz*zz))) 

             fullaryprime(i,1,1,1)=fldhere*bm1(i,1,1,1)             
     $       *cos(twopi/wavelength*(cspeed*rktime-(kx*xx+ky*yy+kz*zz)))
     $       *twopi/wavelength*cspeed

           enddo

      elseif (smodtyp.eq.4) then
        ! APS source term
        ! empty-> reference:: generic-source.inc
      else
          write (*,*) 'Invalid spatial modulation type', smodtyp
          call exitt
      endif

      ! Add fullary to selected field

      if (IFSCAT) then

          if (icalld.eq.0) then
             do i =1,nxyzl
                conscat1(i,1,1,1)=-(epsilo(i,1,1,1)-permit_0)
                conscat2(i,1,1,1)=-(    mu(i,1,1,1)-permea_0)
     $                            * impedence_freespace
             enddo
             icalld=1        
          endif

         if     (fldchs.eq.1) then

           call addcol3(srchy,fullaryprime,conscat2,nxyzl)
           call addcol3(srchz,fullaryprime,conscat2,nxyzl)
           call addcol3(srcey,fullaryprime,conscat1,nxyzl)
           call addcol3(srcez,fullaryprime,conscat1,nxyzl)

           call copy  (incEY,fullary,nxyzl)
           call copy  (incEZ,fullary,nxyzl)
           call copy  (incHY,fullary,nxyzl)
           call copy  (incHZ,fullary,nxyzl)

         endif

         if     (fldchs.eq.2) then

           call addcol3(srcex,fullaryprime,conscat1,nxyzl)
           call addcol3(srcez,fullaryprime,conscat1,nxyzl)
           call addcol3(srchx,fullaryprime,conscat2,nxyzl)
           call addcol3(srchz,fullaryprime,conscat2,nxyzl)

           call copy (incEX,fullary,nxyzl)
           call copy (incEZ,fullary,nxyzl)
           call copy (incHX,fullary,nxyzl)
           call copy (incHZ,fullary,nxyzl)

         endif

         if     (fldchs.eq.3) then

           call addcol3(srcex,fullaryprime,conscat1,nxyzl)
           call addcol3(srcey,fullaryprime,conscat1,nxyzl)
           call addcol3(srchx,fullaryprime,conscat2,nxyzl)
           call addcol3(srchy,fullaryprime,conscat2,nxyzl)

           call copy (incEX,fullary,nxyzl)
           call copy (incEY,fullary,nxyzl)
           call copy (incHX,fullary,nxyzl)
           call copy (incHY,fullary,nxyzl)

         endif

         if ((fldchs.le.0).or.(fldchs.ge.4)) then 
             write(*,*) 'Invalid value for fldchs in general source.'
             call exitt
         endif

      else
     
         if  (fldchs.eq.1) call fadd2(srchx, fullary, nxyzl)
         if  (fldchs.eq.2) call fadd2(srchy, fullary, nxyzl)
         if  (fldchs.eq.3) call fadd2(srchz, fullary, nxyzl)
         if  (fldchs.eq.4) call fadd2(srcex, fullary, nxyzl)
         if  (fldchs.eq.5) call fadd2(srcey, fullary, nxyzl)
         if  (fldchs.eq.6) call fadd2(srcez, fullary, nxyzl)
         if ((fldchs.le.0).or.(fldchs.ge.7)) then 
             write(*,*) 'Invalid value for fldchs in general source.'
             call exitt
         endif

      endif

      return
      end


      subroutine gussian_pulse(tfactor,tt,param1,param2)       
      real tfactor,tt,param

      tfactor = exp(-(2.0*(tt-param1)/param2)**2)

      return
      end


      subroutine cosine_pulse(tfactor,tt,twopi,param1)
      real tfacfor,tt,twopi,param1

      tfactor= cos(twopi*param1*tt)             

      return
      end


      subroutine rectangular_pulse(tfactor,tt,param1)
      real tfacfor,tt,param1

      if (mod(tt,param1).le.0.5*param1) then
          tfactor = 1.
      else
          tfactor = 0. 
      endif

      return
      end


c-----------------------------------------------------------------------
      subroutine userini(tt, myhx, myhy, myhz, myex, myey, myez)
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      real tt
      real myhx(lx1,ly1,lz1,lelt)
      real myhy(lx1,ly1,lz1,lelt)
      real myhz(lx1,ly1,lz1,lelt)
      real myex(lx1,ly1,lz1,lelt)
      real myey(lx1,ly1,lz1,lelt)
      real myez(lx1,ly1,lz1,lelt)

      do i=1,nx1*ny1*nz1*nelt
        xx=XM1(i,1,1,1)
        yy=YM1(i,1,1,1)
        zz=ZM1(i,1,1,1)

        myhx(i,1,1,1) = 0
        myhy(i,1,1,1) = 0
        myhz(i,1,1,1) = 0
        myex(i,1,1,1) = 0
        myey(i,1,1,1) = 0
        myez(i,1,1,1) = 0
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ielg)

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      integer  n, ix, iy, iz, iel, ielg
      real     pi, one, xcc, ycc, zcc, x1, y1, z1
      real     lambda, fc, wc                     

      iel=gllel(ielg)

      call usermedia   (ix,iy,iz,iel)

      if (IFDRUDE)  call userdrude (ix,iy,iz,iel)

      return
      end

c-----------------------------------------------------------------------

      subroutine usermedia(ix,iy,iz,iel) ! Vector form of userf

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      integer  n, ix, iy, iz, iel
      real     pi, one, xcc, ycc, zcc, x1, y1, z1
      real     lambda, fc, wc                     

      udiff  = 0.
      utrans = 0.

      permea = permea_0             
      permit = permit_0                

      return
      end

c-----------------------------------------------------------------------
      subroutine userdrude(ix,iy,iz,iel) ! Vector form of userf

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      integer  n, ix, iy, iz, iel
      real     pi, one, xcc, ycc, zcc, x1, y1, z1
      real     rr, r2                                      
      real     permit_0, permea_0, permit_r
      real     gamma_p, freq_p, lambda, fc, wc                     
      integer  icalld
      save     icalld
      data     icalld /0/

      xx  = xm1(ix,iy,iz,iel)
      yy  = ym1(ix,iy,iz,iel)
      zz  = zm1(ix,iy,iz,iel)

      permit   = permit_0
      permea   = permea_0
      drude_alpha = 0.0               
      drude_beta  = 0.0                         

c     Vertices for Triangle 1 (vx1,vy1), (vx2,vy2), vx3,vy3) 
       vx1= 50.0
       vy1= 0.0
       vx2= 400.0
       vy2= 175.0
       vx3= 400.0
       vy3=-175.0

c     Vertices for Triangle 2 (wx1,wy1), (wx2,wy2), wx3,wy3) 
       wx1=-50.0
       wy1=  0.0
       wx2=-400.0
       wy2= 175.0 
       wx3=-400.0
       wy3=-175.0

       vx1=vx1*nmscale
       vx2=vx2*nmscale
       vx3=vx3*nmscale
       vy1=vy1*nmscale
       vy2=vy2*nmscale
       vy3=vy3*nmscale

       wx1=wx1*nmscale
       wx2=wx2*nmscale 
       wx3=wx3*nmscale
       wy1=wy1*nmscale
       wy2=wy2*nmscale
       wy3=wy3*nmscale

       
       t1=(vy2-vy1)/(vx2-vx1)*(xx-vx1)+vy1
       t2=(vy3-vy1)/(vx3-vx1)*(xx-vx1)+vy1

       s1=(wy2-wy1)/(wx2-wx1)*(xx-wx1)+wy1
       s2=(wy3-wy1)/(wx3-wx1)*(xx-wx1)+wy1

       z1=-25.0*nmscale
       z2= 25.0*nmscale


       if ((zz.ge.z1).and.(zz.le.z2)) then

       if      ( (yy.ge.t2).and.(yy.le.t1)) then

           if (xx.le.vx3) then 

           permit      = permit_0*permit_r
           permea      = permea_0 
           drude_alpha =-gamma_p
           drude_beta  = permit_0*freq_p**2        

           endif

       elseif  ( (yy.ge.s2).and.(yy.le.s1)) then

           if (xx.ge.wx3) then 

           permit      = permit_0*permit_r
           permea      = permea_0 
           drude_alpha =-gamma_p
           drude_beta  = permit_0*freq_p**2        

           endif
       endif

       endif

       return
       end

c-----------------------------------------------------------------------

      subroutine userbfv(bffx,bffy,bffz) ! Vector form of userf
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      real bffx(lx1,ly1,lz1,lelt)
     $   , bffy(lx1,ly1,lz1,lelt) 
     $   , bffz(lx1,ly1,lz1,lelt)

      common /usrfvc/ fscale(lx1*ly1*lz1*lelt)
      common /srcinfo/ src_loc, src_lambda

      integer  mm
      real     lambda,fc,wc,width,half,tc
      real     arg, om, sot                       

      integer icalld
      save    icalld
      data    icalld  /0/
c
      n  = nx1*ny1*nz1*nelt

      if (icalld.eq.0) then

          icalld = 1

          xmin = glmin(xm1,n)
          xmax = glmax(xm1,n)
          ymin = glmin(ym1,n)
          ymax = glmax(ym1,n)
          zmin = glmin(zm1,n)
          zmax = glmax(zm1,n)

          Lxsize = xmax-xmin
          Lysize = ymax-ymin
          Lzsize = zmax-zmin

          do i=1,n

	  x = xm1(i,1,1,1)
	  y = ym1(i,1,1,1)
                                                                   
          src_loc    = param(70)*nmscale                               
          src_lambda = param(71)*nmscale                                

          if (IFNM)  then                                             

          if (param(72).eq.1) arg=-param(74)*(2*(x-src_loc)/Lxsize)**2 
          if (param(72).eq.2) arg=-param(74)*(2*(y-src_loc)/Lysize)**2 
          if (param(72).eq.3) arg=-param(74)*(2*(z-src_loc)/Lzsize)**2  

          else

          if (param(72).eq.1) arg=-param(74)*(2*(x-src_loc)/Lxsize)**2  
          if (param(72).eq.2) arg=-param(74)*(2*(y-src_loc)/Lysize)**2  
          if (param(72).eq.3) arg=-param(74)*(2*(z-src_loc)/Lzsize)**2  

          endif

          fscale(i) = exp(arg)        !impede(i,1,1,1)      

          if (IFNM) fscale(i) = exp(arg)*param(103)

          enddo
            
      endif
 
      om  =  2*pi*cspeed/(src_lambda)*time  ! ifscat=.false.                       
      omp =  2*pi*cspeed/(src_lambda)       ! ifscat=.true.                  

      if (time .le.  param(69)*dt) then

      if (IFSCAT) then    ! scattering field formulation 

         if (param(58).eq.1)  sot = -omp*sin(om)                     
         sot = -sot*(epsilo(i,1,1,1)-1.0)                          

         do i=1,n

         if (param(73).eq.1) 
     $       bffx(i,1,1,1) = bffx(i,1,1,1) + sot*fscale(i)            
         if (param(73).eq.1) 
     $       inchx(i,1,1,1) = cos(om)*fscale(i)            
         if (param(73).eq.2) 
     $       bffy(i,1,1,1) = bffy(i,1,1,1) + sot*fscale(i)
         if (param(73).eq.2) 
     $       inchy(i,1,1,1) = cos(om)*fscale(i)            
         if (param(73).eq.3) 
     $       bffz(i,1,1,1) = bffz(i,1,1,1) + sot*fscale(i)
         if (param(73).eq.3) 
     $       inchz(i,1,1,1) = cos(om)*fscale(i)            
         if (param(73).eq.4) 
     $       bffx(i,1,1,1) = bffx(i,1,1,1) + sot*fscale(i)
         if (param(73).eq.4) 
     $       incex(i,1,1,1) = cos(om)*fscale(i)            
         if (param(73).eq.5) 
     $       bffy(i,1,1,1) = bffy(i,1,1,1) + sot*fscale(i)
         if (param(73).eq.5) 
     $       incey(i,1,1,1) = cos(om)*fscale(i)            
         if (param(73).eq.6) 
     $       bffz(i,1,1,1) = bffz(i,1,1,1) + sot*fscale(i)
         if (param(73).eq.6) 
     $       incez(i,1,1,1) = cos(om)*fscale(i)            
         enddo

      else

      if (param(58).eq.1)  sot =  cos(om)                                        

      do i=1,n
         if (param(73).eq.1) 
     $       bffx(i,1,1,1) = bffx(i,1,1,1) + sot*fscale(i)            
         if (param(73).eq.2) 
     $       bffy(i,1,1,1) = bffy(i,1,1,1) + sot*fscale(i)
         if (param(73).eq.3) 
     $       bffz(i,1,1,1) = bffz(i,1,1,1) + sot*fscale(i)
         if (param(73).eq.4) 
     $       bffx(i,1,1,1) = bffx(i,1,1,1) + sot*fscale(i)
         if (param(73).eq.5) 
     $       bffy(i,1,1,1) = bffy(i,1,1,1) + sot*fscale(i)
         if (param(73).eq.6) 
     $       bffz(i,1,1,1) = bffz(i,1,1,1) + sot*fscale(i)
      enddo

      endif

      endif

      return
      end

c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer ix, iy, iz, ieg
C
      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
C
      qvol   = 0.0
      source = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
C
      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux=0.0
      uy=0.0
      uz=0.0
      temp=0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      return
      end

c-----------------------------------------------------------------------
      subroutine usrdat2

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      real     pi

      n    = nx1*ny1*nz1*nelv

c     ifxyo= .true.

      xmin = glmin(xm1,n)
      xmax = glmax(xm1,n)
      ymin = glmin(ym1,n)
      ymax = glmax(ym1,n)
      zmin = glmin(zm1,n)
      zmax = glmax(zm1,n)


      if (IFNM) then
          sx =nmscale
          sy =nmscale
          sz =nmscale
      else
          sx =1.0 !/(xmax-xmin)
          sy =1.0 !/(ymax-ymin)       
          if (if3d) sz = 1.0 !/(zmax-zmin)            
          nmscale = 1.0 !/(max-xmin)
      endif

      if (if3d) then

      do i=1,n
         xm1(i,1,1,1) = sx*xm1(i,1,1,1)                
         ym1(i,1,1,1) = sy*ym1(i,1,1,1)                        
         zm1(i,1,1,1) = sz*zm1(i,1,1,1)
      enddo

      else

      do i=1,n
         xm1(i,1,1,1) = sx*xm1(i,1,1,1)               
         ym1(i,1,1,1) = sy*ym1(i,1,1,1)                        
      enddo

      endif


      return
      end


c-----------------------------------------------------------------------
      subroutine usersol(u,ind ,ii,i,j,k,e,tt)

      INCLUDE 'SIZE'
      INCLUDE 'TOTAL'
      INCLUDE 'EMWAVE'

      real     omega, tmpH, tmpE, tt  
      real     xx, yy, zz, u    
      integer  i, j, k, e, ii, ind                 


      return
      end

c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      common /ccpu/ cpu_t,cpu_t0

c ... compute errors

      if (istep.le.10.or.mod(istep,iocomm).eq.0) then

        ntott = nx1*ny1*nz1*nelt
        nsrf  = nx1*nz1*nelt*6

        if (ifsol) then
          call usersol(time,shx,shy,shz,sex,sey,sez)
        else
          call rzero(shx, ntott) 
          call rzero(shy, ntott) 
          call rzero(shz, ntott) 
          call rzero(sex, ntott) 
          call rzero(sey, ntott) 
          call rzero(sez, ntott) 
        endif

        call sub3(ErrHX,SHX,HX,NTOTT) 
        call sub3(ErrHY,SHY,HY,NTOTT) 
        call sub3(ErrHZ,SHZ,HZ,NTOTT) 
        call sub3(ErrEX,SEX,EX,NTOTT) 
        call sub3(ErrEY,SEY,EY,NTOTT) 
        call sub3(ErrEZ,SEZ,EZ,NTOTT) 

        HXmr = glamax(ErrHX,NTOTT) 
        HYmr = glamax(ErrHY,NTOTT) 
        HZmr = glamax(ErrHZ,NTOTT) 
        EXmr = glamax(ErrEX,NTOTT) 
        EYmr = glamax(ErrEY,NTOTT) 
        EZmr = glamax(ErrEZ,NTOTT) 

        HXer = glsc3(ErrHX,bm1,ErrHX,NTOTT) / volvm1
        HYer = glsc3(ErrHY,bm1,ErrHY,NTOTT) / volvm1
        HZer = glsc3(ErrHZ,bm1,ErrHZ,NTOTT) / volvm1
        EXer = glsc3(ErrEX,bm1,ErrEX,NTOTT) / volvm1
        EYer = glsc3(ErrEY,bm1,ErrEY,NTOTT) / volvm1
        EZer = glsc3(ErrEZ,bm1,ErrEZ,NTOTT) / volvm1

        if (hxer.gt.0) hxer = sqrt(hxer)
        if (hyer.gt.0) hyer = sqrt(hyer)
        if (hzer.gt.0) hzer = sqrt(hzer)
        if (exer.gt.0) exer = sqrt(exer)
        if (eyer.gt.0) eyer = sqrt(eyer)
        if (ezer.gt.0) ezer = sqrt(ezer)


c ... compute max gap size at interfaces between elmts.

        call CEM_GAP                     

        HXgp = glamax(gHX,NSRF) 
        HYgp = glamax(gHY,NSRF) 
        HZgp = glamax(gHZ,NSRF) 
        EXgp = glamax(gEX,NSRF) 
        EYgp = glamax(gEY,NSRF) 
        EZgp = glamax(gEZ,NSRF) 

c ... print statement

        snel = nelt + .5
        snel = sqrt(snel)
        nels = snel
        nnn  = nx1-1
        npt1 = nnn*nels
        npts = nx1*ny1*nz1*nelt ! npts = npt1**ndim

        if (istep.eq.0)       cpu_p_t= 0
        if (istep.gt.0)       cpu_p_t= cpu_t/(npts*istep)
        if (istep.eq.nsteps)  cpu_p_t= glsum(cpu_p_t,1)/np

        if (nid.eq.0) then

          !h2err = hxer**2 + hyer**2
          !if (h2err.gt.0) h2err = sqrt(h2err)
          !hmgp = max(hxgp,hygp)
          !hmer = max(hxmr,hymr)

          write(6,91) ISTEP,nelt,nels,nnn,npt1,npts
     $         ,time,dt,HXer,HYer,HZer,EXer,EYer,EZer,cpu_t,cpu_p_t
          write(6,95) ISTEP,nelt,nels,nnn,npt1,npts
     $         ,time,dt,HXmr,HYmr,HZmr,EXmr,EYmr,EZmr,cpu_t,cpu_p_t

 91       format(/,i5,3i5,i5,i9,1p9e10.3,e9.2,' CPU: L2  '  )
 95       format(  i5,3i5,i5,i9,1p9e10.3,e9.2,' CPU: Linf'  )

c93       format(i7,1pe10.3)

        endif ! nid=0

      endif

      return
      end

c-----------------------------------------------------------------------
